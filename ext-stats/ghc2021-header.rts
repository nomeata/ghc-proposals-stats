GHC 2021
========

.. author:: Joachim Breitner
.. date-accepted::
.. ticket-url::
.. implemented::
.. highlight:: haskell
.. header:: This proposal is `discussed at this pull request <https://github.com/ghc-proposals/ghc-proposals/pull/380>`_.
.. contents::

This this the PR accompanying the process to define the ``GHC2021`` language set, as outlined in https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0372-ghc-extensions.rst.

Proposed Change
---------------

The ``GHC2021`` language extension set comprises of the following language extensions:

* Everything in ``Haskell2010``, plus
* TBD

Data
----

The following table contains the information that was gathered to help the committee decide, based on an analysis of hackage and a community poll, as well as the tallied votes. At a committe size of 11, **8** votes are necessary to include an extension in ``GHC2021``:

The columns are:

* **Since**: First version that ships this extension

  Some Extension may have had serious changes since then.

* **Proliferation**:   #(packages using that extensions)/#(packages parsed)

* **Innocuousness**:  #(packages enable it in .cabal)/#(packages using default-extensions)

  A high number here indicates that many developers want this on by default in their project, across all modules.

* **Aloofness**: #(packages using this, but _only_ in modules, despite using  default-extensions) /#(packages using default-extensions)

  A high number here indicates that, although a developer was in
  principle happy with putting extensions into the default-extensions
  field, they did not include this particular one. I take this as an
  indication that this extension does _not_ make a great on-by-default
  extension. (Matching my expectation, TemplateHaskell and CPP make
  the highest here)

* **Popularity**: #(users who want this)/#(users who filled out the poll)

* **Contentionsness**: #(users who donâ€™t want this)/#(users who want this)

* **Votes**: #(committee members in favor)/#(commitee members already votes)

  Once all votes are in, 66.6% here indicate that the extension would be accepted.

The raw data (input and aggregated) is found at https://github.com/nomeata/ghc-proposals-stats/blob/master/ext-stats/GHC2021 and the steps to produce them are noted in https://github.com/nomeata/ghc-proposals-stats/blob/master/ext-stats/README.md. This contains an easy setup to load the data into GHCI to play around with ist (custom sorting, etc.)

Caveats:

* The hackage data is based on the the latest version of each hackage package. This skews heavily towards libraries, which are more likely to be found on Hackage than executable. It also puts higher weight on projects that are split into many haskell packages (e.g. amazonka).

* The poll data has no serious protection aginst double voting, and skews heavily towards the part of the communit that is reached by the poll announcemnt.

